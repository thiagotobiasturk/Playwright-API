name: Check Open and Approved Pull Requests

on:
  push:
    branches:
      - master
      - develop
  workflow_dispatch:

jobs:
  check-prs:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check for open PRs and approvals
        run: |
          # Obtenemos todos los PRs abiertos
          PRS=$(curl -s -H "Authorization: token ${{ secrets.TOKEN_GH }}" \
                        "https://api.github.com/repos/${{ github.repository }}/pulls?state=open")
          
          PR_COUNT=$(echo "$PRS" | jq length)

          if [ "$PR_COUNT" -gt 0 ]; then
            echo "Hay PRs abiertos:"
            
            # Inicializamos las listas
            OPEN_PRS=""
            APPROVED_PRS=""
            
            # Iteramos sobre cada PR para verificar si está aprobado
            echo "$PRS" | jq -r '.[].number' | while read pr_number; do
              echo "Revisando PR #$pr_number..."
              
              # Obtenemos los reviews de cada PR
              REVIEWS=$(curl -s -H "Authorization: token ${{ secrets.TOKEN_GH }}" \
                              "https://api.github.com/repos/${{ github.repository }}/pulls/$pr_number/reviews")
              
              # Verificamos si hay algún review aprobado
              APPROVED=$(echo "$REVIEWS" | jq '[.[] | select(.state == "APPROVED")] | length')

              if [ "$APPROVED" -gt 0 ]; then
                APPROVED_PRS="$APPROVED_PRS PR #$pr_number (Aprobado)"
              else
                OPEN_PRS="$OPEN_PRS PR #$pr_number (Abierto)"
              fi
            done
            
            # Mostramos los resultados
            if [ -n "$OPEN_PRS" ]; then
              echo "PRs abiertos:"
              echo "$OPEN_PRS"
            fi
            
            if [ -n "$APPROVED_PRS" ]; then
              echo "PRs aprobados:"
              echo "$APPROVED_PRS"
            fi
          else
            echo "No hay PRs abiertos."
          fi
        env:
          TOKEN_GH: ${{ secrets.TOKEN_GH }}

# name: CI/CD

# on:
#   push:
#     branches:
#       - develop
#       - master
#   pull_request:
#     branches:
#       - develop
#       - master
#     types:
#       - labeled
#       - review_requested
#       - review_request_removed
#       - opened
#       - edited
#       - synchronize
#       - ready_for_review
#       - closed

# jobs:
#   build-and-test:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: read
#       pull-requests: read

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v1

#       - name: Build Docker image
#         run: |
#           docker build -t playwright-test .

#       - name: Debug PR number
#         run: echo "Pull Request number:${{ github.event.pull_request.number }}"

#       - name: Check PR approval status
#         id: pr_approval_check
#         run: |
#           echo "Checking PR approval status..."
          
#           # Usar el token personal de acceso (PAT) almacenado como secreto
#           approval_status=$(curl -v -s \
#             -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
#             "https://github.com/thiagotobiasturk/Playwright-API/pull/5")
          
#           # Mostrar el resultado para depuración
#           echo "Approval status: $approval_status"
          
#           # Si encontramos una revisión con estado "APPROVED", asignamos "approved=true"
#           if echo "$approval_status" | jq '.[] | select(.state == "APPROVED")' > /dev/null; then
#             echo "PR is approved"
#             echo "approved=true" >> $GITHUB_ENV  # Guardar en variable de entorno
#           else
#             echo "PR is not approved"
#             echo "approved=false" >> $GITHUB_ENV  # Guardar en variable de entorno
#           fi

#       - name: Display approved status
#         run: echo "The approval status is:$approved"

#       - name: Run tests in Docker
#         if: env.approved == 'true'
#         run: |
#           echo "Running tests in Docker because PR is approved."
#           docker run --rm playwright-test
